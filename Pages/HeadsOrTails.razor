@page "/heads-or-tails"
@inject NavigationManager NavigationManager
@inject JusGiveawayWebApp.Helpers.CommonFunctions CommonFunctions
@inject IndexedDB.Blazor.IIndexedDbFactory DbFactory
@using JusGiveawayWebApp.Models

<div class="phone-container">
    <div class="phone-screen">
        <div class="game-info">
            <!-- First Row -->
            <div class="player-info">
                <img src="images/avatar_green.png" alt="Player Avatar" />
                <div>
                    <p>@PlayerName</p>
                    <p>Heads/Tails</p>
                </div>
            </div>
            <div class="giveaway-info">
                <p>Giveaway Balance</p>
                <p class="funds">N@(LeftoverGiveawayFunds.ToString("N0"))</p>
                <p @onclick="OnSponsoredByTapped" class="sponsored-link">Sponsored by...</p>
            </div>

            <!-- Second Row -->
            <div class="winning-info">
                <p>Maximum Win</p>
                <p class="funds">N@(MaxPossibleWinnings.ToString("N0"))</p>
            </div>
            <div class="giveaway-info">
                <p>Your Winnings</p>
                <p class="funds">N@(@PotentialWinning.ToString("N0"))</p>
            </div>

            <!-- Third Row -->
            <div class="resets-left" style="grid-column: 1 / -1;">
                @foreach (var heart in HeartImages)
                {
                    <img src="@heart.Source"
                         @onclick="ToggleResetCountVisibility"
                         class="hearts"
                         alt="Heart"
                         style="cursor: pointer;" />
                }
                @if (isResetCountVisible)
                {
                    <p class="@resetCounterParagraphClass">@ResetCount resets left</p>
                }
            </div>
        </div>

        
        <!-- Side choice section -->
        <div class="side-choice-section transition-fade @(SideSelected ? "hidden" : "show")">
            <p>@PlayerChoice</p>
            <div class="coin-images">
                <img src="images/kobo_front.png" alt="Coin Front"
                        class="@((SelectedCoin == "heads") ? "coin selected" : "coin")"
                        style="width: 100px; height: 100px;" @onclick="OnChooseHeadsTapped" />
                <img src="images/kobo_back.png" alt="Coin Back"
                        class="@((SelectedCoin == "tails") ? "coin selected" : "coin")"
                        style="width: 100px; height: 100px;" @onclick="OnChooseTailsTapped" />
            </div>
            <button class="centered-button" @onclick="OnLockInSelectionClicked" disabled="@(!IsGameActive)">Start Game</button>
        </div>
        
        <!--Game play section -->
        <div class="transition-fade @(SideSelected ? "show" : "hidden")">
            <!-- Coin Image -->
            <div class="gameplay-content-centered">
                <img class="coin-image @(isFlipping ? "flipping" : "")" src="@CoinImage" alt="Coin" @onclick="OnCoinTapped" />
            </div>

            <!-- Total Label -->
            <div class="gameplay-content-centered">
                <p>Total Flips: @TotalFlips</p>
            </div>

            <div class="grid-layout">
                <!-- Heads Column -->
                <div class="bar-column">
                    <div class="bar-frame">
                        <div class="bar" style="height: @HeadsBarHeight%;"> </div>
                    </div>
                    <label class="label">Heads</label>
                    <label class="count-label">@HeadsCount</label>
                </div>

                <!-- Tails Column -->
                <div class="bar-column">
                    <div class="bar-frame">
                        <div class="bar tails-bar" style="height: @TailsBarHeight%;"> </div>
                    </div>
                    <label class="label">Tails</label>
                    <label class="count-label">@TailsCount</label>
                </div>
            </div>

            <!-- Score -->
            <div class="gameplay-content-centered">
                <p>Score: <span style="color: @(Score >= 0 ? "green" : "red")">@Score</span></p>
            </div>

            <div class="button-container">
                <button @onclick="OnResetClicked" class="centered-button transition-fade @(IsResetVisible ? "show" : "hidden")">Reset Game</button>
			</div>
			<div class="button-container">
				<button @onclick="OnCashOutClicked" class="transition-fade @(IsCashOutVisible ? "show" : "hidden") centered-button">Cash Out</button>
			</div>
        </div>
    </div>
</div>

@code {
    private string PlayerName { get; set; } = "Player ..";
    private string PlayerChoice { get; set; } = "Choose Heads or Tails";
    private double LeftoverGiveawayFunds { get; set; } = 0;
    private double MaxPossibleWinnings { get; set; } = 0;
    private double PotentialWinning { get; set; } = 23000;
    private int ResetCount { get; set; } = 3;
    private int TotalFlips => HeadsCount + TailsCount;
    private int HeadsCount { get; set; } = 12;
    private int TailsCount { get; set; } = 7;
    private int Score => (HeadsCount - TailsCount) * scoreAdjuster;
    private int scoreAdjuster { get; set; } = 1;
    private bool IsGameActive { get; set; } = false;
    private bool IsCashOutVisible { get; set; } = false;
    private bool IsResetVisible { get; set; } = true;
    private string SelectedCoin = string.Empty;
    private bool SideSelected = false;
    // Calculate height for the bars based on counts
    private double HeadsBarHeight => TotalFlips > 0 ? (double)HeadsCount / TotalFlips * 100 : 0;
    private double TailsBarHeight => TotalFlips > 0 ? (double)TailsCount / TotalFlips * 100 : 0;
    private bool isFlipping = false;
    private string CoinImage = "images/kobo_front.png";
    private GiveawayData? _giveawayData;
    private List<UserGamePlayData> gameDataList = new List<UserGamePlayData>();
    private bool isResetCountVisible = false;
    private string resetCounterParagraphClass = ""; // Class for the paragraph
    private List<HeartImage> HeartImages { get; set; } = new List<HeartImage>();


    protected override async Task OnInitializedAsync()
    {
        _giveawayData = await CommonFunctions.GetGiveawayData();

        //LeftoverGiveawayFunds = _giveawayData.LeftoverGiveawayFunds;
        //MaxPossibleWinnings = _giveawayData.MaxPossibleWinningsPerPerson;


        await Task.WhenAll(
            AnimateNumberChange(value => LeftoverGiveawayFunds = value, LeftoverGiveawayFunds, _giveawayData.LeftoverGiveawayFunds), 
        AnimateNumberChange(value => MaxPossibleWinnings = value, MaxPossibleWinnings, _giveawayData.MaxPossibleWinningsPerPerson));

        try
        {
            using (var db = await this.DbFactory.Create<JusGiveawayDB>())
            {
                db.UserGameDatas.Add(new UserGamePlayData()
                    {
                        Id = 0,
                        UID = "abcdefghijklmnop",
                        SelectedSides = 1,
                        PlayingHeads = 0,
                        HeadsCount = 17,
                        TailsCount = 45,
                        MaxPossibleWinnings = 50000,
                        CurrentWinnings = 17500,
                        MinCashOut = 20000,
                        TotalResetsUsed = 17
                    });
                await db.SaveChanges();
            }
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

        AddHeartImages();
    }

    private async Task LoadGameDataFromDb()
    {
        using (var db = await DbFactory.Create<JusGiveawayDB>())
        {
            // Fetch all records from the GameDataSet
            gameDataList = db.UserGameDatas.ToList<UserGamePlayData>();
        }
    }

    private async Task AnimateNumberChange(Action<double> updateValue, double startValue, double endValue, int duration = 2000)
    {
        int stepDuration = 20; // Duration between each step (in milliseconds)
        int steps = duration / stepDuration; // Total number of steps for the animation

        // Calculate increment value per step
        double incrementValue = (endValue - startValue) / steps;
        double currentValue = startValue;

        // Perform the animation in a loop
        for (int i = 0; i < steps; i++)
        {
            currentValue += incrementValue; // Increment the value
            updateValue(currentValue); // Update the value using the provided delegate
            StateHasChanged(); // Notify Blazor to re-render the UI
            await Task.Delay(stepDuration); // Wait for the next step
        }

        // Set the final value to ensure precision
        updateValue(endValue);
        StateHasChanged(); // Final update
    }

    private async Task StartAnimation()
    {
        double startValue1 = LeftoverGiveawayFunds; // Start from the current value
        double endValue1 = 1000; // Change this value as needed

        double startValue2 = MaxPossibleWinnings; // Start from the current value of AnotherFund
        double endValue2 = 2000; // Change this value as needed

        // Start both animations concurrently
        var task1 = AnimateNumberChange(value => LeftoverGiveawayFunds = value, startValue1, endValue1);
        var task2 = AnimateNumberChange(value => MaxPossibleWinnings = value, startValue2, endValue2);

        // Wait for both animations to complete
        await Task.WhenAll(task1, task2);
    }

    private async void ToggleResetCountVisibility()
    {
        isResetCountVisible = !isResetCountVisible; // Toggle the visibility

        if (isResetCountVisible)
        {
            resetCounterParagraphClass = "fade-in"; // Apply fade-in class
            StateHasChanged(); // Trigger re-render

            await Task.Delay(2000); // Wait for 2 seconds (fade-in duration)

            resetCounterParagraphClass = "fade-out"; // Apply fade-out class
            await Task.Delay(2000); // Wait for 2 seconds (fade-out duration)

            isResetCountVisible = false; // Set visibility to false after fade-out
            resetCounterParagraphClass = ""; // Reset class
            StateHasChanged(); // Trigger re-render
        }
        else
        {
            // If clicked again, immediately hide it (optional)
            isResetCountVisible = false;
            resetCounterParagraphClass = ""; // Reset class
            StateHasChanged(); // Trigger re-render
        }
    }

    private void OnChooseHeadsTapped()
    {
        SelectedCoin = "heads";
        PlayerChoice = "Heads";
        scoreAdjuster = 1;
        IsGameActive = true;
    }

    private void OnChooseTailsTapped()
    {
        SelectedCoin = "tails";
        PlayerChoice = "Tails";
        scoreAdjuster = -1;
        IsGameActive = true;
    }

    private void OnLockInSelectionClicked()
    {
        Console.WriteLine(SideSelected);
        // Logic for starting the game
        SideSelected = true;
        Console.WriteLine(SideSelected);
    }

    private async void OnCoinTapped()
    {
        // Logic for flipping the coin
        if (isFlipping)
            return; // Prevent multiple clicks while flipping

        isFlipping = true;
        StateHasChanged();

        Random random = new Random();
        int totalSpins = 15;  // Total number of flips (adjust as needed)

        // Rotate the coin and switch images for a spinning effect
        for (int i = 0; i < totalSpins; i++)
        {
            CoinImage = i % 2 == 0 ? "images/kobo_front.png" : "images/kobo_back.png"; // Alternate front/back
            StateHasChanged();

            await Task.Delay(100); // Adjust this value to control the speed of spinning
        }

        // Final outcome based on random result (0 = heads, 1 = tails)
        if (random.Next(2) == 0)
        {
            CoinImage = "images/kobo_front.png"; // Set to heads
            HeadsCount += 20;
        }
        else
        {
            CoinImage = "images/kobo_back.png"; // Set to tails
            TailsCount += 20;
        }

        isFlipping = false;
        StateHasChanged(); // Update UI after flipping is complete
    }

    private void OnCashOutClicked()
    {
        // Logic for cashing out
        // IsResetVisible = true;
        // IsCashOutVisible = false;
    }

    private async void OnResetClicked()
    {
        // Logic for resetting the game
        // IsCashOutVisible = true;
        // IsResetVisible = false;
        await LoadGameDataFromDb();
        await StartAnimation();
    }

    private void AddHeartImages()
    {
        var resetsLeft = 17;//TotalResetsAllowed - TotalResetsUsed;
        int i = 0;

        // Green hearts for resets remaining
        for (i = 1; i <= resetsLeft; i++)
        {
            if (i % 2 == 1){
                HeartImages.Add(new HeartImage
                    {
                        Source = "images/green_heart_left.png",
                        OnClick = () => OnHeartClicked($"Heart{i}_Left")
                    });
            }
            else{
                HeartImages.Add(new HeartImage
                    {
                        Source = "images/green_heart_right.png",
                        OnClick = () => OnHeartClicked($"Heart{i}_Right")
                    });
            }
        }

        // Grey hearts for the number of used resets
        for (int j = i; j < i + 3; j++)
        {
            if (j % 2 == 1)
            {
                HeartImages.Add(new HeartImage
                    {
                        Source = "images/grey_heart_left.png",
                        OnClick = () => OnHeartClicked($"Heart{j}_Left")
                    });
            }
            else{
                HeartImages.Add(new HeartImage
                    {
                        Source = "images/grey_heart_right.png",
                        OnClick = () => OnHeartClicked($"Heart{j}_Right")
                    });
            }
        }
    }

    private void OnHeartClicked(string heartId)
    {
        // Handle heart click logic
        Console.WriteLine($"{heartId} clicked.");
        // Add any other logic you want to perform when a heart is clicked.
    }

    private class HeartImage
    {
        public string Source { get; set; }
        public Action OnClick { get; set; }
    }

    private void OnSponsoredByTapped()
    {
        // Logic for resetting the game
    }
}