@page "/heads-or-tails"
@inject NavigationManager NavigationManager
@inject JusGiveawayWebApp.Helpers.CommonFunctions CommonFunctions
@using JusGiveawayWebApp.Models

<div class="phone-container">
    <div class="phone-screen">
        <div class="game-info">
            <!-- First Row -->
            <div class="player-info">
                <img src="images/avatar_green.png" alt="Player Avatar" />
                <div>
                    <p>@PlayerName</p>
                    <p>Heads/Tails</p>
                </div>
            </div>
            <div class="giveaway-info">
                <p>Giveaway Balance</p>
                <p class="funds">N@(LeftoverGiveawayFunds.ToString("N0"))</p>
                <p @onclick="OnSponsoredByTapped" class="sponsored-link">Sponsored by...</p>
            </div>

            <!-- Second Row -->
            <div class="winning-info">
                <p>Maximum Win</p>
                <p class="funds">N@(MaxPossibleWinnings.ToString("N0"))</p>
            </div>
            <div class="giveaway-info">
                <p>Your Winnings</p>
                <p class="funds">N@(@PotentialWinning.ToString("N0"))</p>
            </div>

            <!-- Third Row -->
            <div class="resets-left" style="grid-column: 1 / -1;">
                <img src="images/green_heart_left.png" class="hearts" alt="Hearts" style="cursor: pointer;" />
                <img src="images/green_heart_right.png" class="hearts" alt="Hearts" style="cursor: pointer;" />
                <img src="images/green_heart_left.png" class="hearts" alt="Hearts" style="cursor: pointer;" />
                <img src="images/green_heart_right.png" class="hearts" alt="Hearts" style="cursor: pointer;" />
                <img src="images/green_heart_left.png" class="hearts" alt="Hearts" style="cursor: pointer;" />
                <img src="images/green_heart_right.png" class="hearts" alt="Hearts" style="cursor: pointer;" />
                <img src="images/green_heart_left.png" class="hearts" alt="Hearts" style="cursor: pointer;" />
                <img src="images/green_heart_right.png" class="hearts" alt="Hearts" style="cursor: pointer;" />
                <img src="images/green_heart_left.png" class="hearts" alt="Hearts" style="cursor: pointer;" />
                <img src="images/green_heart_right.png" class="hearts" alt="Hearts" style="cursor: pointer;" />
                <img src="images/green_heart_left.png" class="hearts" alt="Hearts" style="cursor: pointer;" />
                <img src="images/green_heart_right.png" class="hearts" alt="Hearts" style="cursor: pointer;" />
                <img src="images/green_heart_left.png" class="hearts" alt="Hearts" style="cursor: pointer;" />
                <img src="images/grey_heart_right.png" class="hearts" alt="Hearts" style="cursor: pointer;" />
                <img src="images/grey_heart_left.png" class="hearts" alt="Hearts" style="cursor: pointer;" />
                <img src="images/grey_heart_right.png" class="hearts" alt="Hearts" style="cursor: pointer;" />
                <img src="images/grey_heart_left.png" class="hearts" alt="Hearts" style="cursor: pointer;" />
                <img src="images/grey_heart_right.png" class="hearts" alt="Hearts" style="cursor: pointer;" />
                <img src="images/grey_heart_left.png" class="hearts" alt="Hearts" style="cursor: pointer;" />
                <img src="images/grey_heart_right.png" class="hearts" alt="Hearts" style="cursor: pointer;" />
                <img src="images/grey_heart_left.png" class="hearts" alt="Hearts" style="cursor: pointer;" />
                <img src="images/grey_heart_right.png" class="hearts" alt="Hearts" style="cursor: pointer;" />
                <p>@ResetCount resets left</p>
            </div>
        </div>

        
        <!-- Side choice section -->
        <div class="side-choice-section transition-fade @(SideSelected ? "hidden" : "show")">
            <p>@PlayerChoice</p>
            <div class="coin-images">
                <img src="images/kobo_front.png" alt="Coin Front"
                        class="@((SelectedCoin == "heads") ? "coin selected" : "coin")"
                        style="width: 100px; height: 100px;" @onclick="OnChooseHeadsTapped" />
                <img src="images/kobo_back.png" alt="Coin Back"
                        class="@((SelectedCoin == "tails") ? "coin selected" : "coin")"
                        style="width: 100px; height: 100px;" @onclick="OnChooseTailsTapped" />
            </div>
            <button class="centered-button" @onclick="OnLockInSelectionClicked" disabled="@(!IsGameActive)">Start Game</button>
        </div>
        
        <!--Game play section -->
        <div class="transition-fade @(SideSelected ? "show" : "hidden")">
            <!-- Coin Image -->
            <div class="gameplay-content-centered">
                <img class="coin-image @(isFlipping ? "flipping" : "")" src="@CoinImage" alt="Coin" @onclick="OnCoinTapped" />
            </div>

            <!-- Total Label -->
            <div class="gameplay-content-centered">
                <p>Total Flips: @TotalFlips</p>
            </div>

            <div class="grid-layout">
                <!-- Heads Column -->
                <div class="bar-column">
                    <div class="bar-frame">
                        <div class="bar" style="height: @HeadsBarHeight%;"> </div>
                    </div>
                    <label class="label">Heads</label>
                    <label class="count-label">@HeadsCount</label>
                </div>

                <!-- Tails Column -->
                <div class="bar-column">
                    <div class="bar-frame">
                        <div class="bar tails-bar" style="height: @TailsBarHeight%;"> </div>
                    </div>
                    <label class="label">Tails</label>
                    <label class="count-label">@TailsCount</label>
                </div>
            </div>

            <!-- Score -->
            <div class="gameplay-content-centered">
                <p>Score: <span style="color: @(Score >= 0 ? "green" : "red")">@Score</span></p>
            </div>

            <div class="button-container">
                <button @onclick="OnResetClicked" class="centered-button transition-fade @(IsResetVisible ? "show" : "hidden")">Reset Game</button>
			</div>
			<div class="button-container">
				<button @onclick="OnCashOutClicked" class="transition-fade @(IsCashOutVisible ? "show" : "hidden") centered-button">Cash Out</button>
			</div>
        </div>
    </div>
</div>

@code {
    private string PlayerName { get; set; } = "Player ..";
    private string PlayerChoice { get; set; } = "Choose Heads or Tails";
    private decimal LeftoverGiveawayFunds { get; set; } = 0;
    private decimal MaxPossibleWinnings { get; set; } = 0;
    private decimal PotentialWinning { get; set; } = 23000;
    private int ResetCount { get; set; } = 3; // Example reset count
    private int TotalFlips => HeadsCount + TailsCount;
    private int HeadsCount { get; set; } = 12;
    private int TailsCount { get; set; } = 7;
    private int Score => (HeadsCount - TailsCount) * scoreAdjuster;
    private int scoreAdjuster { get; set; } = 1;
    private bool IsGameActive { get; set; } = false;
    private bool IsCashOutVisible { get; set; } = false;
    private bool IsResetVisible { get; set; } = true;
    private string SelectedCoin = string.Empty;
    private bool SideSelected = false;
    // Calculate height for the bars based on counts
    private double HeadsBarHeight => TotalFlips > 0 ? (double)HeadsCount / TotalFlips * 100 : 0;
    private double TailsBarHeight => TotalFlips > 0 ? (double)TailsCount / TotalFlips * 100 : 0;
    private bool isFlipping = false;
    private string CoinImage = "images/kobo_front.png";
    private GiveawayData? _giveawayData;


    protected override async Task OnInitializedAsync()
    {
        _giveawayData = await CommonFunctions.GetGiveawayData();

        LeftoverGiveawayFunds = _giveawayData.LeftoverGiveawayFunds;
        MaxPossibleWinnings = _giveawayData.MaxPossibleWinningsPerPerson;
    }

    private void OnChooseHeadsTapped()
    {
        SelectedCoin = "heads";
        PlayerChoice = "Heads";
        scoreAdjuster = 1;
        IsGameActive = true;
    }

    private void OnChooseTailsTapped()
    {
        SelectedCoin = "tails";
        PlayerChoice = "Tails";
        scoreAdjuster = -1;
        IsGameActive = true;
    }

    private void OnLockInSelectionClicked()
    {
        Console.WriteLine(SideSelected);
        // Logic for starting the game
        SideSelected = true;
        Console.WriteLine(SideSelected);
    }

    private async void OnCoinTapped()
    {
        // Logic for flipping the coin
        if (isFlipping)
            return; // Prevent multiple clicks while flipping

        isFlipping = true;
        StateHasChanged();

        Random random = new Random();
        int totalSpins = 15;  // Total number of flips (adjust as needed)

        // Rotate the coin and switch images for a spinning effect
        for (int i = 0; i < totalSpins; i++)
        {
            CoinImage = i % 2 == 0 ? "images/kobo_front.png" : "images/kobo_back.png"; // Alternate front/back
            StateHasChanged();

            await Task.Delay(100); // Adjust this value to control the speed of spinning
        }

        // Final outcome based on random result (0 = heads, 1 = tails)
        if (random.Next(2) == 0)
        {
            CoinImage = "images/kobo_front.png"; // Set to heads
            HeadsCount += 20;
        }
        else
        {
            CoinImage = "images/kobo_back.png"; // Set to tails
            TailsCount += 20;
        }

        isFlipping = false;
        StateHasChanged(); // Update UI after flipping is complete
    }

    private void OnCashOutClicked()
    {
        // Logic for cashing out
        IsResetVisible = true;
        IsCashOutVisible = false;
    }

    private void OnResetClicked()
    {
        // Logic for resetting the game
        IsCashOutVisible = true;
        IsResetVisible = false;
    }

    private void OnSponsoredByTapped()
    {
        // Logic for resetting the game
    }
}