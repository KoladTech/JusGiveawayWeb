@page "/"
@inject JusGiveawayWebApp.Services.FirebaseService FirebaseService
@inject JusGiveawayWebApp.Helpers.CommonFunctions CommonFunctions
@inject NavigationManager NavigationManager
@inject IndexedDB.Blazor.IIndexedDbFactory DbFactory
@using JusGiveawayWebApp.Helpers
@using JusGiveawayWebApp.Models

<div class="phone-container">
    <div class="phone-screen">
        <img src="images/logo_green.png" class="jg-logo" alt="Logo" />

        <!-- Sign Up label -->
        <h2 class="form-title">Log In</h2>
        <p class="small-text">Enter your email and password...</p>


        <label>Email</label>
        <div class="entry-frame">
            <InputText @bind-Value="email" placeholder="Enter your email" type="email" class="entry" />
        </div>

        <label>Password</label>
        <div class="entry-frame">
            <div class="password-container">
                <InputText @bind-Value="password"
                           placeholder="Enter password"
                           type="password"
                           class="entry"
                           maxlength="12"
                           @oninput="e => ToggleBtn(e)" />
            </div>
        </div>

        <div class="button-container">
            <button class="centered-button" @onclick="OnSignInClicked" disabled="@(!btnEnabled)">Log In</button>
        </div>

        @if (isLoading)
        {
            <p>Loading...</p>
        }

        <div class="signup-signin-prompt">
            <p style ="margin: 10px 0px 0px 0px;">Don't have a JusGiveaway account? <a @onclick="NavigateToSignUp" class="signup-signin-link">Sign up</a></p>
        </div>

        <div class="form-footer-template">
            <div class="form-footer-text copyright">© 2024 JusGiveaway. All rights reserved.</div>
            <div class="form-footer-text">DavidBukola Foundation</div>
            <div class="form-footer-text tagline">Where care meets community</div>
        </div>

        <Toast Message="@toastMessage" IsVisible="@isToastVisible" IsVisibleChanged="@(val => isToastVisible = val)" />

    </div>
</div>


@code {
    [CascadingParameter]
    private CustomNavigationStack CustomNavStack { get; set; }
    private string userName;
    private string email = "f@f.com";
    private string password = "Qwerty1!w";
    private bool isLoading = false;
    private bool isToastVisible;
    private string toastMessage;    
    private DateTime giveawayStartDate;
    private bool isTester;

    private bool btnEnabled = false;

    protected override async Task OnInitializedAsync()
    {
        #region Check if user is tester
        //read tester from indexeddb
        try
        {
            using (var db = await this.DbFactory.Create<JusGiveawayDB>())
            {
                if (CommonFunctions.GetTesterFromIndexedDb(db))
                {
                    isTester = true;
                }
                else
                {
                    isTester = false;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        #endregion

        #region Check if navigate to countdownpage
        //check if we should navigate to the countdownpage
        var startDate = await CommonFunctions.GetGiveawayStartDateFromFirebase();

        if (!DateTime.TryParseExact(startDate, "yyyy/MM/dd HH:mm:ss",
            System.Globalization.CultureInfo.InvariantCulture, 
            System.Globalization.DateTimeStyles.None, out giveawayStartDate))
        {
            Console.WriteLine("Invalid starting date format retrieved from database");
            //should this navigation be here?
            NavigationManager.NavigateTo("/");
        }
        TimeSpan remainingTime = giveawayStartDate - DateTime.Now;

        if (remainingTime.TotalSeconds > 0 && !isTester)
        {
            NavigationManager.NavigateTo("/countdownpage");
        }
        #endregion

        if (CustomNavStack.Pages.Count != 0)
        {
            var signInPage = CustomNavStack.FindPageByName("SignInPage");

            if (signInPage != null)
            {
                var playerUID = signInPage["PlayerUID"];
                try
                {
                    //await FirebaseService.SignOutAsync();
                    using (var db = await this.DbFactory.Create<JusGiveawayDB>())
                    {
                        await CommonFunctions.SignOutUser(db, playerUID);
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }
                ShowToast("Signed out");
            }
        }
    }

    private async Task OnSignInClicked()
    {
        var response = await FirebaseService.SignInEmailPassword(email, password);
        if (response != null)
        {
            string uid = response.LocalId;
            string idToken = response.IdToken;
            FirebaseService.SetAuthToken(idToken);
            //store userinfo in indexeddb
            try
            {
                using (var db = await this.DbFactory.Create<JusGiveawayDB>())
                {
                    var existingUser = CommonFunctions.GetUserInfoFromIndexedDb(db, uid);
                    userName = existingUser?.Name ?? "GameError";

                    if (existingUser == null)
                    {
                        //if not in indexeddb that means browser data was cleared
                        //or a new computer/phone/machine is being logged into
                        //so we will retrieve data from firebase to now store in indexeddb
                        userName = await CommonFunctions.GetUsersNameFromFirebase(uid);

                        db.UserInfo.Add(new UserInfo()
                            {
                                UID = uid,
                                IdToken = idToken,
                                Name = userName,
                                PhoneNumber = null,
                                EmailAddress = email
                            });
                        await db.SaveChanges();
                    }
                    else
                    {
                        // Update the existing user's information
                        existingUser.IdToken = idToken;

                        // Save changes
                        await db.SaveChanges();
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
            ShowToast("Signed in");
            // Redirect to the main page or home page after successful sign in
            CustomNavStack.AddPage("SignInPage", uid);
            CustomNavStack.AddPage("MainPage", uid);
            NavigationManager.NavigateTo($"/mainpage/{uid}");
        }
        else
        {
            ShowToast("Invalid email or password");
        }
    }

    private void ToggleBtn(ChangeEventArgs e)
    {
        password = e.Value?.ToString() ?? string.Empty;
        btnEnabled = password == "" ? false : true;
    }

    private void NavigateToSignUp()
    {
        NavigationManager.NavigateTo("/signup");
    }

    private void ShowToast(string message)
    {
        toastMessage = message;
        isToastVisible = true;

        // Auto-hide the toast after 5 seconds
        _ = Task.Delay(5000).ContinueWith(t =>
        {
            InvokeAsync(() =>
            {
                isToastVisible = false;
                StateHasChanged();
            });
        });
    }
}
