@page "/"
@inject JusGiveawayWebApp.Services.FirebaseService FirebaseService
@inject JusGiveawayWebApp.Helpers.CommonFunctions CommonFunctions
@inject NavigationManager NavigationManager
@inject IndexedDB.Blazor.IIndexedDbFactory DbFactory
@using JusGiveawayWebApp.Helpers
@using JusGiveawayWebApp.Models
@using System.Text.Json
@inject JusGiveawayWebApp.Services.UserInfoService UserInfoService

<div class="phone-container">
    <div class="phone-screen">
        <img src="images/about_us_logo.png" class="jg-logo" alt="Logo" />

        @if (!ShowEmailVerificationMessage)
        {
            <!-- Sign Up label -->
            <h2 class="form-title">Log In</h2>
            <p class="small-text">Enter your email and password...</p>


            <label>Email</label>
            <div class="entry-frame">
                <InputText @bind-Value="email" placeholder="Enter your email" type="email" class="entry" />
            </div>

            <label>Password</label>
            <div class="entry-frame">
                <div class="password-container">
                    <InputText @bind-Value="password"
                               placeholder="Enter password"
                               type=@passwordType
                               class="entry"
                               maxlength="20"
                               @oninput="e => ToggleBtn(e)" />
                    <i class="password-toggle-icon" @onclick="TogglePasswordVisibility">
                        @if (passwordType == "password")
                        {
                            <span class="eye-icon">👁️</span> <!-- Eye icon when password is hidden -->
                        }
                        else
                        {
                            <span class="eye-icon">🙈</span> <!-- Eye-off icon when password is visible -->
                        }
                    </i>
                </div>
            </div>

            <div class="button-container">
                <button class="centered-button" @onclick="OnSignInClicked" disabled="@(!btnEnabled)">Log In</button>
            </div>
        }

        @if (ShowEmailVerificationMessage)
        {
            <div style="text-align: center; margin-top: 50px;">
                <h2 style="color: #333;">Please verify your email!</h2>
                <p style="font-size: 1.2rem; color: #555;">
                    We sent a verification link to your email. Click the link and log in again.
                </p>
            </div>
        }

        <div class="signup-signin-prompt">
            <p style ="margin: 10px 0px 0px 0px;">Don't have a JusGiveaway account? <a @onclick="NavigateToSignUp" class="signup-signin-link">Sign up</a></p>
        </div>

        <div class="form-footer-template">
            <div class="form-footer-text copyright">© 2024 JusGiveaway. All rights reserved.</div>
            <div class="form-footer-text">To Win A Giveaway Today</div>
            <div class="form-footer-text tagline">All You Have To Do Is Play</div>
        </div>

        <Toast Message="@toastMessage" IsVisible="@isToastVisible" IsVisibleChanged="@(val => isToastVisible = val)" />
        <NotifyBanner ShowVersionBanner="ShowNotificationBanner" />
    </div>
</div>


@code {
    [CascadingParameter]
    private CustomNavigationStack CustomNavStack { get; set; }
    private string userName;
    private string email = "";
    private string password = "";
    private string passwordType = "password";
    private bool isLoading = false;
    private bool isToastVisible;
    private string toastMessage;    
    private DateTime giveawayStartDate;
    private bool isTester;
    string jsonStringTestEmails;
    List<string>? testEmailList = new List<string>();
    bool isTestEmail = false;
    bool isEmailVerified = true;
    bool ShowEmailVerificationMessage = false;
    private bool ShowNotificationBanner = false;
    private UserInfo? userInfo = new UserInfo();
    private string currentGiveaway = "";
    //private List<string> navigationHistory = new List<string>();

    private bool btnEnabled = false;

    private void TogglePasswordVisibility()
    {
        // Toggle the password visibility
        passwordType = passwordType == "password" ? "text" : "password";
    }

    protected override async Task OnInitializedAsync()
    {
        if (CustomNavStack.Pages.Count != 0)
        {
            var signInPage = CustomNavStack.FindPageByName("SignInPage");

            if (signInPage != null)
            {
                var playerUID = signInPage["PlayerUID"];
                await CommonFunctions.SignOutUser(this.DbFactory, playerUID);
                ShowToast("Signed out");
            }
        }
        currentGiveaway = await CommonFunctions.GetActiveGiveawayNameFromFirebase();
    }

    private async Task OnSignInClicked()
    {
        //move this to CommonFunctions
        if (await CheckNeedForHardRefresh())
        {
            return;
        }

        var response = await FirebaseService.SignInEmailPassword(email, password);
        if (response != null)
        {
            string uid = response.LocalId;
            string idToken = response.IdToken;
            FirebaseService.SetRefreshToken(response.RefreshToken);
            bool authTokenExpired = await FirebaseService.SetAuthTokenIfNotExpired(idToken);
            if (authTokenExpired)
            {
                await CommonFunctions.SignOutUser(this.DbFactory, uid);
                ShowToast("Error logging in");
                NavigationManager.NavigateTo("/");
                return;
            }

            try
            {
                jsonStringTestEmails = await CommonFunctions.GetTestEmailsFromFirebase();
                testEmailList = JsonSerializer.Deserialize<List<string>>(jsonStringTestEmails);
                isTestEmail = testEmailList == null ? false : testEmailList.Contains(email);
            }
            catch (Exception ex)
            {
                await CommonFunctions.WriteErrorMessageToFirebase(ex.Message, "retrieving test emails from firebase", DateTime.Now.ToString());
                Console.WriteLine(ex.Message + "retrieving test emails from firebase");
            }

            isEmailVerified = await FirebaseService.IsEmailVerified(idToken);
            ShowEmailVerificationMessage = !isEmailVerified;
            StateHasChanged();
            // Hide the verification message after 10 seconds
            var _ = Task.Delay(10000).ContinueWith(_ =>
            {
                InvokeAsync(() => ShowEmailVerificationMessage = !ShowEmailVerificationMessage);
                StateHasChanged();
            });

            //check if user has verified their emails
            if (isTestEmail || isEmailVerified)
            {
                // Proceed with login
                Console.WriteLine("Email verified. Login successful.");
            }
            else
            {
                Console.WriteLine("Email not verified. Please verify your email.");
                ShowToast("Please verify email to proceed");
                // send another verification email
                await FirebaseService.SendEmailVerification(idToken);
                return;
            }

            //store uid in UserInfoService singleton to use in NavMenu
            UserInfoService.PlayerUID = uid;

            //store userinfo in indexeddb
            try
            {
                using (var db = await this.DbFactory.Create<JusGiveawayDB>())
                {
                    var existingUser = CommonFunctions.GetUserInfoFromIndexedDb(db, uid);
                    userName = existingUser?.Name ?? "GameError";

                    if (existingUser == null)
                    {
                        //if not in indexeddb that means browser data was cleared
                        //or a new computer/phone/machine is being logged into
                        //so we will retrieve data from firebase to now store in indexeddb
                        userInfo = await CommonFunctions.GetUserInfoFromFirebase(uid);

                        userInfo.IdToken = idToken;
                        db.UserInfo.Add(userInfo);
                        await db.SaveChanges();
                    }
                    else
                    {
                        // Update the existing user's information
                        existingUser.IdToken = idToken;

                        // Save changes
                        await db.SaveChanges();
                    }
                }
            }
            catch (Exception ex)
            {
                await CommonFunctions.WriteErrorMessageToFirebase(ex.Message, "SignIn - OnSignInClicked()", DateTime.Now.ToString());
                Console.WriteLine(ex.Message);
            }

            //Add bonus for signup referrals and update count for number of referrals
            try
            {
                string referredByUID = await CommonFunctions.GetUserReferredByFromFirebase(uid);

                var bonusAlreadyAwarded = (referredByUID != null && referredByUID.Split('-').Last() == "x" ) ? true : false;

                if (!bonusAlreadyAwarded)
                {
                    if (referredByUID != null && referredByUID != "")
                    {
                        UserGamePlayData? userGamePlayDataForReferer = await CommonFunctions.GetUserGamePlayDataFromFirebase(referredByUID, currentGiveaway);

                        if (userGamePlayDataForReferer == null)
                        {
                            userGamePlayDataForReferer = new UserGamePlayData()
                                {
                                    CurrentWinnings = 200, //store this under the giveaways node
                                    UID = referredByUID
                                };
                        }
                        else
                        {
                            userGamePlayDataForReferer.CurrentWinnings += 200;
                        }
                        await CommonFunctions.SaveUserGamePlayDataToFirebase(userGamePlayDataForReferer, currentGiveaway);

                        //update referers code usageCount
                        string refCodeUsed = await CommonFunctions.GetReferralCodeFromOwnerUID(referredByUID);
                        if (refCodeUsed != null)
                        {
                            await CommonFunctions.UpdateReferralCodeUsageCount(refCodeUsed);

                            await CommonFunctions.UpdateReferredByUIDInFirebase(uid, referredByUID);
                        }
                    }
                }
            }
            catch(Exception ex)
            {
                await CommonFunctions.WriteErrorMessageToFirebase(ex.Message, "SignIn - Error adding referral bonus", DateTime.Now.ToString());
                Console.WriteLine(ex.Message + " Error adding referral bonus");
            }

            ShowToast("Logged in");
            // Redirect to the main page or home page after successful sign in
            CustomNavStack.AddPage("SignInPage", uid);
            CustomNavStack.AddPage("MainPage", uid);
            NavigationManager.NavigateTo($"/mainpage/{uid}");
        }
        else
        {
            ShowToast("Invalid email or password");
        }
    }

    private void ToggleBtn(ChangeEventArgs e)
    {
        password = e.Value?.ToString() ?? string.Empty;
        btnEnabled = password == "" ? false : true;
    }

    private void NavigateToSignUp()
    {
        NavigationManager.NavigateTo("/signup");
    }

    private void ShowToast(string message)
    {
        toastMessage = message;
        isToastVisible = true;

        // Auto-hide the toast after 5 seconds
        _ = Task.Delay(5000).ContinueWith(t =>
        {
            InvokeAsync(() =>
            {
                isToastVisible = false;
                StateHasChanged();
            });
        });
    }

    private async Task<bool> CheckNeedForHardRefresh()
    {
        try
        {
            //first check if there is a new version of the app
            string versionFromFirebase = await CommonFunctions.GetAppVersionFromFirebase();
            var versionFromClient = await FirebaseService.GetLocalVersionAsync();

            if (versionFromFirebase != null && versionFromClient != null && versionFromClient.version != versionFromFirebase)
            {
                //show banner
                ShowNotificationBanner = true;
            }
        }
        catch (Exception ex)
        {
            await CommonFunctions.WriteErrorMessageToFirebase(ex.Message, "error comparing versions of app", DateTime.Now.ToString());
            Console.WriteLine(ex.Message + " error comparing versions of app");
        }
        return ShowNotificationBanner;
    }

    // private void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    // {
    //     // Add the new URL to your navigation history
    //     navigationHistory.Add(e.Location);

    //     // Log the history to the console
    //     Console.WriteLine("Navigation history:**************************");
    //     foreach (var historyUrl in navigationHistory)
    //     {
    //         Console.WriteLine(historyUrl);
    //     }
    // }

    protected void Dispose(bool disposing)
    {
        //NavigationManager.LocationChanged -= OnLocationChanged;
    }
}
