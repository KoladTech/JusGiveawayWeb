@page "/countdownpage"
@inject NavigationManager NavigationManager
@inject JusGiveawayWebApp.Services.FirebaseService FirebaseService
@inject JusGiveawayWebApp.Helpers.CommonFunctions CommonFunctions
@using JusGiveawayWebApp.Helpers
@using JusGiveawayWebApp.Models
@inject IndexedDB.Blazor.IIndexedDbFactory DbFactory


<div class="phone-container">
    <div class="phone-screen">
        <div class="vertical-stack-layout center-content">
            <div class="countdown-container">
                <!-- Logo -->
                <img src="images/about_us_logo.png" alt="Logo" class="countdown-logo" />
                <h2 class="countdown-title">Countdown</h2>

                <!-- Countdown Timer -->
                <div class="frame">
                    <div class="vertical-stack-layout">
                        <!-- Days -->
                        <div class="stack-layout">
                            <span class="countdown-label days-label">@days</span>
                            <span class="countdown-unit">Days</span>
                        </div>

                        <!-- Hours -->
                        <div class="stack-layout">
                            <span class="countdown-label hours-label">@hours</span>
                            <span class="countdown-unit">Hours</span>
                        </div>

                        <!-- Minutes -->
                        <div class="stack-layout">
                            <span class="countdown-label minutes-label">@minutes</span>
                            <span class="countdown-unit">Minutes</span>
                        </div>

                        <!-- Seconds -->
                        <div class="stack-layout">
                            <span class="countdown-label seconds-label">@seconds</span>
                            <span class="countdown-unit">Seconds</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        @* <div class="entry-container">
            <InputText @bind-Value="testCode" placeholder="Testers only....." class="entry" @oninput="e => UpdateTestCode(e)" />
            <button class="centered-button" @onclick="OnTesterBtnClicked" disabled="@(!isCodeValid)">Tester Login</button>
        </div> *@

        <div style="display: flex; flex-direction: column; align-items: center; margin-top: 0px; font-family: 'Arial', sans-serif;">
            <div style="padding: 10px; border: 3px solid #4CAF50; border-radius: 15px; background-color: #f9f9f9; box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1); text-align: center; max-width: 350px;">
                <h4 style="color: #4CAF50; font-size: 1.8rem; margin: 0;">Registered Players</h4>
                <p style="font-size: 2.5rem; font-weight: bold; color: #333; margin: 0px 0;">
                    @userCount
                </p>
                <p style="font-size: 1.2rem; color: #555; margin-top: 0px;">
                    <span style="color: #E53935; font-weight: bold;">@(userCountMinimumToStartGame - @userCount)</span> players to go!!!
                </p>
                <p style="font-size: 1rem; color: #777; margin-top: 5px; font-style: italic;">
                    Help us reach <span style="font-weight: bold;">@userCountMinimumToStartGame</span> players to kick off the game!
                </p>
            </div>
        </div>

        <div style="text-align: center; margin-top: 20px;">
            <h4 style="color: #333;">While you wait</h4>
            <p style="font-size: 1.2rem; color: #555;">
                Try out "Heads or Tails" below
            </p>
        </div>

        <div style="text-align: center; margin-top:5px">
            <button class="centered-button" @onclick="OnDemoClicked">Play Demo</button>
            <button class="centered-button" @onclick="ShowHeadsOrTailsInstructions">How to Play</button>
        </div>

        @if (ShowSurvey)
        {
            <div style="text-align: center; margin-top: 20px;">
                <h4 style="color: #333;">Answer Quick Survey</h4>
                <p style="font-size: 1.2rem; color: #555;">
                    Will you play "Heads or Tails" when we launch?
                </p>
            </div>        <div style="text-align: center; margin-top:5px">
                <button class="centered-button" @onclick="OnSurveyYesClicked">Yes</button>
                <button class="centered-button" @onclick="OnSurveyNoClicked">No</button>
            </div>
        }
        <!-- Import the instruction pop-up component -->
        <HeadsOrTailsInstructionsPage @ref="headsOrTailsInstructionsPopup" />

        <CustomAlertDialog ShowDialog="@ShowDialog" DialogParams="@alertDialogParams" />
        <LoadingScreen IsLoading="@isLoading" IsFullScreen="true" />
    </div>
</div>

@code {
    private bool _isCountdownRunning = false;
    private DateTime giveawayStartDate;
    private int days, hours, minutes, seconds;
    private GiveawayData? _giveawayData;
    private string testCode;
    private HeadsOrTailsInstructionsPage headsOrTailsInstructionsPopup;
    private bool isCodeValid =>
        !string.IsNullOrEmpty(testCode)&& testCode == "37652";

    private bool ShowDialog = false;
    private AlertDialogParams alertDialogParams = new AlertDialogParams();
    private bool ShowSurvey = true;
    private string currentGiveaway = "";
    private int userCount = 0;
    private int userCountMinimumToStartGame = 0;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        //read survey from indexeddb
        try
        {
            using (var db = await this.DbFactory.Create<JusGiveawayDB>())
            {
                bool surveyTaken = CommonFunctions.GetSurveyResultFromIndexedDb(db);

                if (surveyTaken)
                {
                    ShowSurvey = false;
                }
                else
                {
                    ShowSurvey = true;
                }
            }
        }
        catch (Exception ex)
        {
            await CommonFunctions.WriteErrorMessageToFirebase(ex.Message, "CountdownPage - OnInitializedAsync() - ReadSurveyFromIndexedDB", DateTime.Now.ToString());
            Console.WriteLine(ex.Message);
        }

        currentGiveaway = await CommonFunctions.GetActiveGiveawayNameFromFirebase();

        userCount = await CommonFunctions.GetAllUsersCountFromFirebase();
        userCountMinimumToStartGame = await CommonFunctions.GetAllUsersCountMinimumToStartGameFromFirebase();
        //change this to only get the startdate. Limiting how much we get from db
        //_giveawayData = await CommonFunctions.GetGiveawayDataFromFirebase();//CheckDataSize(); I want to check the difference btw retrieving all vs just the data
        var startDate = await CommonFunctions.GetGiveawayStartDateFromFirebase(currentGiveaway);

        isLoading = false;

        // Trigger the countdown when the page is loaded
        await StartCountdown(startDate);
        StateHasChanged();
    }

    private async Task StartCountdown(string startDate)
    {
        GetGiveawayStartDate(startDate);
        _isCountdownRunning = true;

        while (_isCountdownRunning)
        {
            TimeSpan remainingTime = giveawayStartDate - DateTime.Now;

            if (remainingTime.TotalSeconds <= 0)
            {
                // Countdown complete
                days = 0;
                hours = 0;
                minutes = 0;
                seconds = 0;
                _isCountdownRunning = false;
                OnCountdownCompleted();
            }
            else
            {
                // Update countdown values
                days = remainingTime.Days;
                hours = remainingTime.Hours;
                minutes = remainingTime.Minutes;
                seconds = remainingTime.Seconds;
            }

            await InvokeAsync(StateHasChanged); // Re-render the component
            await Task.Delay(1000); // Wait for 1 second before updating
        }
    }

    private void GetGiveawayStartDate(string? startDate)
    {
        //2024/10/11 00:55:33
        //Date 12:55:33 (this is the target date time. Use this for future testing)
        if (startDate == null)
        {
            giveawayStartDate = DateTime.Now.AddDays(60);
            return;
        }

        if (!DateTime.TryParseExact(startDate, "yyyy/MM/dd HH:mm:ss",
            System.Globalization.CultureInfo.InvariantCulture, 
            System.Globalization.DateTimeStyles.None, out giveawayStartDate))
        {
            Console.WriteLine("Invalid starting date format retrieved from database");
        }
    }

    private void OnCountdownCompleted()
    {
        // Navigate to another page or show a message (example)
        Console.WriteLine("Countdown Completed!");

        if (userCount >= userCountMinimumToStartGame)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private void UpdateTestCode(ChangeEventArgs e)
    {
        testCode = e.Value?.ToString() ?? string.Empty;
        StateHasChanged();
    }

    private async void OnDemoClicked()
    {
        //write to firebasedb for stats
        await CommonFunctions.SaveUserStatsForCountDownPageToFirebase(true,false);

        NavigationManager.NavigateTo("/heads-or-tails-demo/");
    }

    private async void OnTesterBtnClicked()
    {
        await SaveTesterToIndexedDb();
        NavigationManager.NavigateTo("/");
    }

    private void OnSurveyYesClicked()
    {
        ShowDialog = true;
        alertDialogParams.AlertTitle = "Did you like the Demo?";
        alertDialogParams.AlertMessage = new MarkupString("Will you be back to play when we launch?");
        alertDialogParams.PrimaryBtnText = "Yes";
        alertDialogParams.SecondaryBtnText = "Go back";
        alertDialogParams.OnPrimaryButtonClick = EventCallback.Factory.Create(this, AlertDialogPrimaryClickedSurveyYes);
        alertDialogParams.OnSecondaryButtonClick = EventCallback.Factory.Create(this, AlertDialogSecondaryClickedSurveyYes);
    }

    private void OnSurveyNoClicked()
    {
        ShowDialog = true;
        alertDialogParams.AlertTitle = "Oh no...";
        alertDialogParams.AlertMessage = new MarkupString("Maybe next time. Thanks for trying our demo");
        alertDialogParams.PrimaryBtnText = "Yes, next time";
        alertDialogParams.SecondaryBtnText = "Go back";
        alertDialogParams.OnPrimaryButtonClick = EventCallback.Factory.Create(this, AlertDialogPrimaryClickedSurveyNo);
        alertDialogParams.OnSecondaryButtonClick = EventCallback.Factory.Create(this, AlertDialogSecondaryClickedSurveyNo);
    }

    private async void AlertDialogPrimaryClickedSurveyYes()
    {
        ShowDialog = false;
        ShowSurvey = false;
        //save to firebase db
        await CommonFunctions.SaveUserSurveyToFirebase(true);

        await SaveUserSurveyToIndexedDb();
    }

    private void AlertDialogSecondaryClickedSurveyYes()
    {
        ShowDialog = false;
    }

    private async void AlertDialogPrimaryClickedSurveyNo()
    {
        ShowDialog = false;
        ShowSurvey = false;
        //save to firebase db
        await CommonFunctions.SaveUserSurveyToFirebase(false);

        await SaveUserSurveyToIndexedDb();
    }

    private async Task SaveUserSurveyToIndexedDb()
    {
        //store survey in indexeddb
        try
        {
            using (var db = await this.DbFactory.Create<JusGiveawayDB>())
            {
                db.UserInfo.Add(new UserInfo()
                    {
                        TookSurvey = true
                    });
                await db.SaveChanges();
            }
        }
        catch (Exception ex)
        {
            await CommonFunctions.WriteErrorMessageToFirebase(ex.Message, "CountDownPage - SaveUserSurveyToIndexedDB", DateTime.Now.ToString());
            Console.WriteLine(ex.Message);
        }
    }

    private async Task SaveTesterToIndexedDb()
    {
        //store tester in indexeddb
        try
        {
            using (var db = await this.DbFactory.Create<JusGiveawayDB>())
            {
                db.UserInfo.Add(new UserInfo()
                    {
                        Tester = true
                    });
                await db.SaveChanges();
            }
        }
        catch (Exception ex)
        {
            await CommonFunctions.WriteErrorMessageToFirebase(ex.Message, "CountDownPage - SaveTesterToIndexedDB", DateTime.Now.ToString());
            Console.WriteLine(ex.Message);
        }
    }

    private void AlertDialogSecondaryClickedSurveyNo()
    {
        ShowDialog = false;
    }

    private async void ShowHeadsOrTailsInstructions()
    {
        //write to firebasedb for stats
        await CommonFunctions.SaveUserStatsForCountDownPageToFirebase(false,true);

        headsOrTailsInstructionsPopup.ShowPopup();
    }

    private string result;

    private void CheckDataSize()
    {
        var giveawayData = new GiveawayData
            {
                LeftoverGiveawayFunds = 1000,
                MaxPossibleWinningsPerPerson = 500,
                MinCashoutPerPerson = 10,
                MonetaryResetPenalty = 5,
                NumberOfPlayers = 100,
                RoundBigLossMonetaryValue = 200,
                RoundBigWinMonetaryValue = 1000,
                RoundDrawMonetaryValue = 50,
                RoundSmallLossMonetaryValue = 5,
                RoundSmallWinMonetaryValue = 20,
                Sponsor = "Company A",
                SponsorInstagramAccount = "@companyA",
                StartDate = "2024-10-01",
                Title = "Big Giveaway",
                TotalGiveAwayFunds = 5000,
                TotalResetsAllowed = 5
            };

        long sizeInBytes = giveawayData.GetSizeInBytes(giveawayData.LeftoverGiveawayFunds);
        result = $"Size of GiveawayData in bytes: {sizeInBytes}";
        Console.WriteLine(sizeInBytes);
    }
}
