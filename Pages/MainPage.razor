@page "/mainpage/{PlayerUID?}"
@inject JusGiveawayWebApp.Services.FirebaseService FirebaseService
@using static JusGiveawayWebApp.Pages.CustomAlertDialog
@using JusGiveawayWebApp.Helpers
@inject NavigationManager NavigationManager
@using static JusGiveawayWebApp.Helpers.CommonFunctions
@inject IndexedDB.Blazor.IIndexedDbFactory DbFactory
@using JusGiveawayWebApp.Models
@inject JusGiveawayWebApp.Helpers.CommonFunctions CommonFunctions

<div class="phone-container">
    <div class="phone-screen">
        <!-- Top section with avatar and greeting -->
        <div class="game-info">
            <div class="avatar-container">
                <img src="images/avatar_green.png" class="avatar-image" />
                <div class="player-info">
                    <span>Hello @PlayerName</span>
                </div>
            </div>
        </div>

        <!-- Games label -->
        <h2 class="games-title">Games</h2>

        <!-- Game selection grid -->
        <div class="games-grid">
            <!-- First row -->
            <div class="game-card">
                <img src="images/info_icon.png" class="info-icon" alt="Info Icon" @onclick="ShowHeadsOrTailsInstructions" style="cursor: pointer;" />
                <img src="images/kobo_front.png" class="game-image" />
                <span class="game-label">Heads Or Tails</span>
                <button @onclick="PlayHeadsOrTailsGame" class="play-button">Play</button>
            </div>

            <div class="game-card">
                <img src="images/info_icon.png" class="info-icon" alt="Info Icon" @onclick="ShowHeadsOrTailsInstructions" style="cursor: pointer;" />
                <img src="images/question_mark.png" class="game-image" />
                <span class="game-label">Coming Soon</span>
                <button class="play-button" disabled>Play</button>
            </div>

            <!-- Second row -->
            <div class="game-card">
                <img src="images/info_icon.png" class="info-icon" alt="Info Icon" @onclick="ShowHeadsOrTailsInstructions" style="cursor: pointer;" />
                <img src="images/question_mark.png" class="game-image" />
                <span class="game-label">Coming Soon</span>
                <button class="play-button" disabled>Play</button>
            </div>

            <div class="game-card">
                <img src="images/info_icon.png" class="info-icon" alt="Info Icon" @onclick="ShowHeadsOrTailsInstructions" style="cursor: pointer;" />
                <img src="images/question_mark.png" class="game-image" />
                <span class="game-label">Coming Soon</span>
                <button class="play-button" disabled>Play</button>
            </div>
        </div>

        <!-- Logout button -->
        <div style="text-align: center;">
            <button @onclick="Logout" class="logout-button">
                <img src="images/logout_icon.png" class="logout-icon" />
            </button>
        </div>

        <!-- Loading indicator (hidden initially) -->
        @if (isLoading)
        {
            <div class="loading-indicator">
                <span>Loading...</span>
            </div>
        }

        <Toast Message="@toastMessage" IsVisible="@isToastVisible" IsVisibleChanged="@(val => isToastVisible = val)" />
    </div>
</div>

<CustomAlertDialog ShowDialog ="@ShowDialog" DialogParams ="@alertDialogParams"/>

<!-- Import the instruction pop-up component -->
<HeadsOrTailsInstructionsPage @ref="headsOrTailsInstructionsPopup" />

@code {
    // Bindable properties and variables
    // [CascadingParameter]
    // private CustomNavigationStack CustomNavStack { get; set; }
    public string PlayerName { get; set; } = "Player";
    [Parameter]
    public string PlayerUID { get; set; } = "";

    private bool isLoading = false;
    private bool ShowDialog = false;
    private bool isToastVisible;
    private string toastMessage;
    private string errorMessage;
    private AlertDialogParams alertDialogParams = new AlertDialogParams();
    private HeadsOrTailsInstructionsPage headsOrTailsInstructionsPopup;

    protected override void OnInitialized()
    {
        if (string.IsNullOrEmpty(PlayerUID))
        {
            // Redirect to the sign-in page
            NavigationManager.NavigateTo("/");
            return;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        //commented out for now. I doubt it will be needed though
        //use customnavstack to see if back was pressed
        // if (CustomNavStack.Pages.Count != 0)
        // {
        //     var headsortailsPage = CustomNavStack.FindPageByName("HeadsOrTails");

        //     if (headsortailsPage != null)
        //     {
        //         var playerUID = headsortailsPage["PlayerUID"];
        //         try
        //         {
        //             //bool userSaved = await CommonFunctions.SaveUserGamePlayDataToFirebase(userGamePlayData);

        //             using (var db = await this.DbFactory.Create<JusGiveawayDB>())
        //             {
        //                 await CommonFunctions.SignOutUser(db, playerUID);
        //             }
        //         }
        //         catch (Exception ex)
        //         {
        //             Console.WriteLine(ex.Message);
        //         }
        //         ShowToast("Signed out");
        //     }
        // }
        try
        {
            using (var db = await this.DbFactory.Create<JusGiveawayDB>())
            {
                var currentActiveUser = db.UserInfo.FirstOrDefault(u => u.UID == PlayerUID);

                //check if user is logged in
                if (currentActiveUser == null || CommonFunctions.SendUserBackToLogInPageIfNotLoggedIn(currentActiveUser))
                {
                    NavigationManager.NavigateTo("/");
                    return;
                }

                PlayerName = currentActiveUser.Name;
                //set auth token in case of a refresh of page
                bool authTokenExpired = await FirebaseService.SetAuthTokenIfNotExpired(currentActiveUser.IdToken);
                if (authTokenExpired)
                {
                    await CommonFunctions.SignOutUser(this.DbFactory, PlayerUID);
                    NavigationManager.NavigateTo("/");
                    return;
                }
            }
        }
        catch (Exception ex)
        {
            await CommonFunctions.WriteErrorMessageToFirebase(ex.Message, "MainPage - OnInitializedAsync()", DateTime.Now.ToString());
            Console.WriteLine(ex.Message);
        }
    }

    // Event handlers
    private void ShowHeadsOrTailsInstructions()
    {
        headsOrTailsInstructionsPopup.ShowPopup();
    }

    private void PlayHeadsOrTailsGame()
    {
        // Handle play button click for Heads or Tails
        //CustomNavStack.AddPage("HeadsOrTails", PlayerUID);
        NavigationManager.NavigateTo($"/heads-or-tails/{PlayerUID}");
    }

    private void ShowComingSoonInstructions()
    {
        // Handle instructions button click for coming soon games
    }


    private void Logout()
    {
        ShowDialog = true;
        alertDialogParams.AlertTitle = "Sign out?";
        alertDialogParams.AlertMessage = new MarkupString("Are you sure you want to sign out?");
        alertDialogParams.OnPrimaryButtonClick = EventCallback.Factory.Create(this, AlertDialogPrimaryClicked);
        alertDialogParams.OnSecondaryButtonClick = EventCallback.Factory.Create(this, AlertDialogSecondaryClicked);
    }

    private async void AlertDialogPrimaryClicked()
    {
        ShowDialog = false;
        await CommonFunctions.SignOutUser(this.DbFactory, PlayerUID);
        ShowToast("Signed out");

        NavigationManager.NavigateTo("/");
    }

    private void AlertDialogSecondaryClicked()
    {
        ShowDialog = false;
    }

    private void ShowToast(string message)
    {
        toastMessage = message;
        isToastVisible = true;

        // Auto-hide the toast after 3 seconds
        _ = Task.Delay(3000).ContinueWith(t =>
        {
            InvokeAsync(() =>
            {
                isToastVisible = false;
                StateHasChanged();
            });
        });
    }
}
