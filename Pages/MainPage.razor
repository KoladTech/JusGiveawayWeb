@page "/mainpage/{PlayerUID?}"
@inject JusGiveawayWebApp.Services.FirebaseService FirebaseService
@using static JusGiveawayWebApp.Pages.CustomAlertDialog
@using JusGiveawayWebApp.Helpers
@inject NavigationManager NavigationManager
@using static JusGiveawayWebApp.Helpers.CommonFunctions
@inject IndexedDB.Blazor.IIndexedDbFactory DbFactory
@inject IJSRuntime JSRuntime
@using JusGiveawayWebApp.Models
@using System.Text.Json
@inject JusGiveawayWebApp.Helpers.CommonFunctions CommonFunctions
@inject JusGiveawayWebApp.Helpers.AdminFunctions AdminFunctions
@inject JusGiveawayWebApp.Services.UserInfoService UserInfoService

<div class="phone-container">
    <div class="phone-screen">
        <div class="falling-symbols-rain-overlay">
            <div class="falling-symbols">
                <img src="images/falling_image_1.png" alt="Star" />
            </div>
            <div class="falling-symbols">
                <img src="images/falling_image_7.png" alt="Star" />
            </div>
            <div class="falling-symbols">
                <img src="images/falling_image_4.png" alt="Star" />
            </div>
            <div class="falling-symbols">
                <img src="images/falling_image_8.png" alt="Star" />
            </div>
            <div class="falling-symbols">
                <img src="images/falling_image_3.png" alt="Star" />
            </div>
            <div class="falling-symbols">
                <img src="images/falling_image_5.png" alt="Star" />
            </div>
            <div class="falling-symbols">
                <img src="images/falling_image_9.png" alt="Star" />
            </div>
            <div class="falling-symbols">
                <img src="images/falling_image_2.png" alt="Star" />
            </div>
            <div class="falling-symbols">
                <img src="images/falling_image_10.png" alt="Star" />
            </div>
            <div class="falling-symbols">
                <img src="images/falling_image_6.png" alt="Star" />
            </div>
            <!-- Add more symbols as needed -->
        </div>

        <!-- Top section with avatar and greeting -->
        <div class="game-info">
            <div class="avatar-container">
                <img src="images/avatar_green.png" class="avatar-image" />
                <div class="player-info">
                    <p class="player-name">@PlayerName</p>
                    <p class="player-bonus">Winnings ₦@(refBonus.ToString("N0"))</p>
				</div>
            </div>
            <div class="ref-code">
                <p>Referral Code</p>
                <p>@(RefCode == "" ? "No RefCode" : RefCode)</p>
                <button class="copy-button" @onclick="CopyReferralLink">Copy Link</button>
            </div>
        </div>

        <!-- Games label -->
        <h2 class="games-title">Games</h2>

        <!-- Game selection grid -->
        <div class="games-grid">
            <!-- First row -->
            <div class="game-card">
                <img src="images/info_icon.png" class="info-icon" alt="Info Icon" @onclick="ShowHeadsOrTailsInstructions" style="cursor: pointer;" />
                <img src="images/kobo_front.png" class="game-image" />
                <span class="game-label">Heads Or Tails</span>
                <button @onclick="PlayHeadsOrTailsGame" class="play-button">Play</button>
            </div>

            <div class="game-card">
                <img src="images/info_icon.png" class="info-icon" alt="Info Icon" @onclick="ShowComingSoonInstructions" style="cursor: pointer;" />
                <img src="images/daily_giveaway_image.png" class="game-image" />
                <span class="game-label">Daily Giveaway</span>
                <button class="play-button" disabled>Play</button>
            </div>

            <!-- Second row -->
            <div class="game-card">
                <img src="images/info_icon.png" class="info-icon" alt="Info Icon" @onclick="ShowComingSoonInstructions" style="cursor: pointer;" />
                <img src="images/question_mark.png" class="game-image" />
                <span class="game-label">Coming Soon</span>
                <button class="play-button" disabled>Play</button>
            </div>

            <div class="game-card">
                <img src="images/info_icon.png" class="info-icon" alt="Info Icon" @onclick="ShowComingSoonInstructions" style="cursor: pointer;" />
                <img src="images/question_mark.png" class="game-image" />
                <span class="game-label">Coming Soon</span>
                <button class="play-button" disabled>Play</button>
            </div>
        </div>

        <!-- Logout button -->
        <div class="button-container">
            <button @onclick="Logout" class="centered-button">
                <img src="images/logout_icon.png?v=2" alt="Button Image" style="width: 30px; height: 30px; margin-right: 2px;" />
                Sign out
            </button>
        </div>

        @if (isAdminEmail)
        {
            <!-- Admin button for internal use only. Should only be shown to certain emails -->
            <div class="button-container">
                <button @onclick="GoToAdminPage" class="centered-button">
                    <img src="images/admin_icon.png" alt="Button Image" style="width: 30px; height: 30px; margin-right: 2px;" />
                    Admin Access
                </button>
            </div>
        }

        <!-- Loading indicator (hidden initially) -->
        @if (isLoading)
        {
            <div class="loading-indicator">
                <span>Loading...</span>
            </div>
        }

        <Toast Message="@toastMessage" IsVisible="@isToastVisible" IsVisibleChanged="@(val => isToastVisible = val)" />
    </div>
</div>

<CustomAlertDialog ShowDialog="@ShowDialog" DialogParams="@alertDialogParams" />
<NotifyBanner ShowVersionBanner="ShowNotificationBanner" />

<!-- Import the instruction pop-up component -->
<HeadsOrTailsInstructionsPage @ref="headsOrTailsInstructionsPopup" />

@code {
    // Bindable properties and variables
    // [CascadingParameter]
    // private CustomNavigationStack CustomNavStack { get; set; }
    public string PlayerName { get; set; } = "Player";
    public string RefCode { get; set; } = "";
    private int refBonus { get; set; } = 0;
    [Parameter]
    public string PlayerUID { get; set; } = "";

    private bool isLoading = false;
    private bool ShowDialog = false;
    private bool isToastVisible;
    private string toastMessage;
    private string errorMessage;
    private bool ShowNotificationBanner = false;
    private AlertDialogParams alertDialogParams = new AlertDialogParams();
    private HeadsOrTailsInstructionsPage headsOrTailsInstructionsPopup;
    private DotNetObjectReference<MainPage>? objRef;
    private bool isUserLoggedIn = true; // Assume user is logged in initially
    string jsonStringAdminEmails;
    AdminCredentials adminCredentials = new AdminCredentials();
    List<string>? adminEmailList = new List<string>();
    bool isAdminEmail = false;
    UserInfo? currentActiveUser;
    private string currentGiveaway = "";

    protected override void OnInitialized()
    {
        if (string.IsNullOrEmpty(PlayerUID))
        {
            // Redirect to the sign-in page
            NavigationManager.NavigateTo("/");
            return;
        }

        //store uid in UserInfoService singleton to use in NavMenu
        UserInfoService.PlayerUID = PlayerUID;
    }

    protected override async Task OnInitializedAsync()
    {
        //commented out for now. I doubt it will be needed though
        //use customnavstack to see if back was pressed
        // if (CustomNavStack.Pages.Count != 0)
        // {
        //     var headsortailsPage = CustomNavStack.FindPageByName("HeadsOrTails");

        //     if (headsortailsPage != null)
        //     {
        //         var playerUID = headsortailsPage["PlayerUID"];
        //         try
        //         {
        //             //bool userSaved = await CommonFunctions.SaveUserGamePlayDataToFirebase(userGamePlayData);

        //             using (var db = await this.DbFactory.Create<JusGiveawayDB>())
        //             {
        //                 await CommonFunctions.SignOutUser(db, playerUID);
        //             }
        //         }
        //         catch (Exception ex)
        //         {
        //             Console.WriteLine(ex.Message);
        //         }
        //         ShowToast("Signed out");
        //     }
        // }

        ShowNotificationBanner = await CommonFunctions.CheckNeedForHardRefresh(FirebaseService);

        if (ShowNotificationBanner)
        {
            return;
        }

        try
        {
            using (var db = await this.DbFactory.Create<JusGiveawayDB>())
            {
                currentActiveUser = db.UserInfo.FirstOrDefault(u => u.UID == PlayerUID);

                //check if user is logged in
                if (currentActiveUser == null || CommonFunctions.SendUserBackToLogInPageIfNotLoggedIn(currentActiveUser))
                {
                    NavigationManager.NavigateTo("/");
                    return;
                }

                PlayerName = currentActiveUser.Name;
                RefCode = currentActiveUser.ReferralCode;
                //set auth token in case of a refresh of page
                bool authTokenExpired = await FirebaseService.SetAuthTokenIfNotExpired(currentActiveUser.IdToken);
                if (authTokenExpired)
                {
                    await CommonFunctions.SignOutUser(this.DbFactory, PlayerUID);
                    NavigationManager.NavigateTo("/");
                    return;
                }
            }
        }
        catch (Exception ex)
        {
            await CommonFunctions.WriteErrorMessageToFirebase(ex.Message, "MainPage - OnInitializedAsync()", DateTime.Now.ToString());
            Console.WriteLine(ex.Message);
        }

        currentGiveaway = await CommonFunctions.GetActiveGiveawayNameFromFirebase();
        refBonus = await CommonFunctions.GetUserCashOutAmountFromFirebase(PlayerUID, currentGiveaway);

        //determime if admin button be shown
        try
        {
            adminCredentials = await AdminFunctions.GetAdminCredentialsFromFirebase();
            isAdminEmail = (adminCredentials.AdminEmails == null || adminCredentials.AdminEmails.Count == 0 || currentActiveUser == null) 
            ? false : adminCredentials.AdminEmails.Contains(currentActiveUser.EmailAddress);
        }
        catch (Exception ex)
        {
            await CommonFunctions.WriteErrorMessageToFirebase(ex.Message, "retrieving admin emails from firebase", DateTime.Now.ToString());
            Console.WriteLine(ex.Message + "retrieving admin emails from firebase");
        }

        //function which helps with sign out on inactivity
        await OnLoginSuccess();
    }

    // Event handlers
    private void ShowHeadsOrTailsInstructions()
    {
        headsOrTailsInstructionsPopup.ShowPopup();
    }

    private async Task PlayHeadsOrTailsGame()
    {
        // #region Check if user is tester
        // //read tester from indexeddb
        // try
        // {
        //     using (var db = await this.DbFactory.Create<JusGiveawayDB>())
        //     {
        //         if (CommonFunctions.GetTesterFromIndexedDb(db))
        //         {
        //             isTester = true;
        //         }
        //         else
        //         {
        //             isTester = false;
        //         }
        //     }
        // }
        // catch (Exception ex)
        // {
        //     await CommonFunctions.WriteErrorMessageToFirebase(ex.Message, "SignIn - OnInitializedAsync()", DateTime.Now.ToString());
        //     Console.WriteLine(ex.Message);
        // }
        // #endregion

        #region Check if navigate to countdownpage
        //check if we should navigate to the countdownpage
        var startDate = await CommonFunctions.GetGiveawayStartDateFromFirebase(currentGiveaway);
        DateTime giveawayStartDate;

        if (!DateTime.TryParseExact(startDate, "yyyy/MM/dd HH:mm:ss",
            System.Globalization.CultureInfo.InvariantCulture,
            System.Globalization.DateTimeStyles.None, out giveawayStartDate))
        {
            Console.WriteLine("Invalid starting date format retrieved from database");
            //should this navigation be here?
            NavigationManager.NavigateTo("/");
            return;
        }
        TimeSpan remainingTime = giveawayStartDate - DateTime.Now;

        if (remainingTime.TotalSeconds > 0 && !currentActiveUser.Tester)
        {
            NavigationManager.NavigateTo("/countdownpage");
            return;
        }
        #endregion

        // Handle play button click for Heads or Tails
        //CustomNavStack.AddPage("HeadsOrTails", PlayerUID);
        NavigationManager.NavigateTo($"/heads-or-tails/{PlayerUID}");
    }

    private void ShowComingSoonInstructions()
    {
        ShowDialog = true;
        alertDialogParams.AlertTitle = "Coming Soon";
        alertDialogParams.AlertMessage = new MarkupString("More games will be available soon 😊");
        alertDialogParams.SecondaryBtnText = "Ok";
        alertDialogParams.ShowPrimaryBtn = false;
        alertDialogParams.OnSecondaryButtonClick = EventCallback.Factory.Create(this, AlertDialogSecondaryClicked);
    }


    private void Logout()
    {
        ShowDialog = true;
        alertDialogParams.AlertTitle = "Sign out?";
        alertDialogParams.AlertMessage = new MarkupString("Are you sure you want to sign out?");
        alertDialogParams.OnPrimaryButtonClick = EventCallback.Factory.Create(this, AlertDialogPrimaryClicked);
        alertDialogParams.OnSecondaryButtonClick = EventCallback.Factory.Create(this, AlertDialogSecondaryClicked);
    }

    private async void AlertDialogPrimaryClicked()
    {
        ShowDialog = false;
        await CommonFunctions.SignOutUser(this.DbFactory, PlayerUID);
        ShowToast("Signed out");

        NavigationManager.NavigateTo("/");
    }

    private void AlertDialogSecondaryClicked()
    {
        ShowDialog = false;
    }

    private async Task CopyReferralLink()
    {
        var signupUrl = $"{NavigationManager.BaseUri}signup?refcode={RefCode}";
        bool copySuccess = await JSRuntime.InvokeAsync<bool>("copyToClipboard", signupUrl);

        // Show toasts based on the result
        if (copySuccess)
        {
            ShowToast("Referral link copied!");
        }
        else
        {
            ShowToast("Failed to copy referral link.");
        }
    }

    private void GoToAdminPage()
    {
        NavigationManager.NavigateTo($"/admins-only/{PlayerUID}");
    }

    private void ShowToast(string message)
    {
        toastMessage = message;
        isToastVisible = true;

        // Auto-hide the toast after 3 seconds
        _ = Task.Delay(3000).ContinueWith(t =>
        {
            InvokeAsync(() =>
            {
                isToastVisible = false;
                StateHasChanged();
            });
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && isUserLoggedIn)
        {
            // Creating a DotNetObjectReference to pass to JavaScript
            objRef = DotNetObjectReference.Create(this);

            //await JSRuntime.InvokeVoidAsync("onPageExit", objRef);
            // Load the JavaScript to track inactivity
            await JSRuntime.InvokeVoidAsync("inactivityTimer", objRef);

            //await JSRuntime.InvokeVoidAsync("addBackButtonListener", objRef);
        }
    }

    [JSInvokable]
    public async Task LogoutUser()
    {
        //function to log out user due to inactivity
        isUserLoggedIn = false;  // Set the flag to false on logout

        // Clear any user session data or tokens
        await CommonFunctions.SignOutUser(this.DbFactory, PlayerUID);

        Console.WriteLine("inside logoutuser - MainPage" + isUserLoggedIn);
        // Optionally redirect to the login page
        NavigationManager.NavigateTo("/");

        // Clear the inactivity timer after logout
        await JSRuntime.InvokeVoidAsync("clearInactivityTimer");
    }

    private async Task OnLoginSuccess()
    {
        // Your existing login logic here...

        // Reset the inactivity timer's logged out flag
        await JSRuntime.InvokeVoidAsync("resetUserLoggedOutFlag");

        // Set up the inactivity timer again after login
        await JSRuntime.InvokeVoidAsync("inactivityTimer", objRef);
    }

    public void Dispose()
    {
        // Dispose the object reference to prevent memory leaks
        objRef?.Dispose();

        Console.WriteLine("inside dispose function in MainPage");
        var _ = CommonFunctions.WriteErrorMessageToFirebase("Inside Dispose()", "in MainPage", DateTime.Now.ToString());
    }
}
