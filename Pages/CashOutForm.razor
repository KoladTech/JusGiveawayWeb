@page "/cashout/{PlayerUID?}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject JusGiveawayWebApp.Services.FirebaseService FirebaseService
@inject IndexedDB.Blazor.IIndexedDbFactory DbFactory
@inject JusGiveawayWebApp.Helpers.CommonFunctions CommonFunctions
@using JusGiveawayWebApp.Helpers
@using Microsoft.AspNetCore.Components.Forms
@using JusGiveawayWebApp.Pages
@using JusGiveawayWebApp.Models

<div class="phone-container">
    <div class="phone-screen">
        <div class="naira-rain-overlay">
            <div class="naira-symbol">₦</div>
            <div class="naira-symbol">₦</div>
            <div class="naira-symbol">₦</div>
            <div class="naira-symbol">₦</div>
            <div class="naira-symbol">₦</div>
            <div class="naira-symbol">₦</div>
            <div class="naira-symbol">₦</div>
            <div class="naira-symbol">₦</div>
            <div class="naira-symbol">₦</div>
            <div class="naira-symbol">₦</div>
            <!-- Add more symbols as needed -->
        </div>

        <img src="images/about_us_logo.png" class="jg-logo" alt="Logo" />

        @if(!hideCashoutform)
        {
            <h2 class="form-title">Cash Out</h2>
            <p class="small-text">Winner! Please enter details to cash out</p>

            <p class="cash-out-display">
                Cashing out - <span class="cash-out-amount">₦@(userCashOutAmount.ToString("N0"))</span>
            </p>

            <label>First Name</label>
            <div class="entry-frame">
                <InputText @bind-Value="firstName" placeholder="Enter first name" class="entry" @oninput="e => UpdateFirstName(e)" />
            </div>

            <label>Last Name</label>
            <div class="entry-frame">
                <InputText @bind-Value="lastName" placeholder="Enter last name" class="entry" @oninput="e => UpdateLastName(e)" />
            </div>

            <div class="entry-frame">
                <label>
                    <input type="checkbox" @bind="isMale" />
                    Male
                </label>

        
                <label>
                    <input type="checkbox" @bind="isFemale" />
                    Female
                </label>
            </div>

            <label>Email</label>
            <div class="entry-frame">
                <InputText @bind-Value="email" placeholder="Enter email" type="email" class="entry" @oninput="e => UpdateEmail(e)" />
            </div>

            <label>Phone #</label>
            <div class="entry-frame">
                <InputText @bind-Value="phoneNum" placeholder="Enter cellphone# (+234xxxxxxxxxx)" class="entry" @oninput="e => UpdatePhoneNum(e)" />
            </div>

		    <label>Bank Name</label>
		    <div class="entry-frame">
                <InputText @bind-Value="bankName" placeholder="Enter bank's' name" class="entry" @oninput="e => UpdateBankName(e)" />
		    </div>

            <label>Bank Account Number</label>
            <div class="entry-frame">
                <InputText @bind-Value="acctNum" placeholder="Enter account#" class="entry" @oninput="e => UpdateAcctNum(e)" />
            </div>

            <label>Instagram Handle</label>
            <div class="entry-frame">
                <InputText @bind-Value="instagramAccount" placeholder="Enter IG handle" class="entry" @oninput="e => UpdateInstagramAcct(e)" />
            </div>

            <div class="attention-message">
                <span class="icon">⚠️</span> <!-- Add an icon for emphasis -->
                Please make sure your information is accurate before submission
            </div>


            <div class="button-container">
                <button class="centered-button" @onclick="OnSubmitClicked" disabled="@(!FormValidated && !cashOutInfoSubmitted)">Submit</button>
            </div>
        }

        @if (cashOutInfoSubmitted)
        {
            <div style="text-align: center; margin-top: 50px;">
                <h2 style="color: #333;">Thanks for playing in this giveaway @userInfo.Name!</h2>
                <p style="font-size: 1.2rem; color: #555;">
                    Till next time. Your winnings will be paid to you shortly.
                </p>

                <button @onclick="NavigateToHomePage" style="
                    background-color: #28a745;
                    color: white;
                    padding: 10px 20px;
                    border: none;
                    font-size: 1rem;
                    cursor: pointer;
                    margin-top: 20px;
                    border-radius: 5px;">
                    Go to Games
                </button>
            </div>

        }

        @if (tooLateInsufficientGiveawayFunds)
        {
            <div style="text-align: center; margin-top: 50px;">
                <h2 style="color: #333;">Thanks for playing in this giveaway @userInfo.Name!</h2>
                <p style="font-size: 1.2rem; color: #555;">
                    Better luck next time.
                </p>

                <button @onclick="NavigateToHomePage" style="
                    background-color: #28a745;
                    color: white;
                    padding: 10px 20px;
                    border: none;
                    font-size: 1rem;
                    cursor: pointer;
                    margin-top: 20px;
                    border-radius: 5px;">
                    Go to Games
                </button>
            </div>

        }

        <div class="form-footer-template">
            <div class="form-footer-text copyright">© 2024 JusGiveaway. All rights reserved.</div>
            <div class="form-footer-text">To Win A Giveaway Today</div>
            <div class="form-footer-text tagline">All You Have To Do Is Play</div>
        </div>

        <Toast Message="@toastMessage" IsVisible="@isToastVisible" IsVisibleChanged="@(val => isToastVisible = val)" />
        <CustomAlertDialog ShowDialog="@ShowDialog" DialogParams="@alertDialogParams" />
    </div>
</div>

@code {
    [Parameter]
    public string PlayerUID { get; set; } = "";
    private string firstName;
    private string lastName;
    private string email;
    private string phoneNum;
    private string bankName;
    private string acctNum;
    private string instagramAccount;
    private string password; //should I do something like sign in again to make sure its user cashing out?
    private bool isToastVisible;
    private string toastMessage;
    private bool ShowDialog = false;
    private AlertDialogParams alertDialogParams = new AlertDialogParams();
    UserInfo? userInfo;
    int userCashOutAmount; 
    private bool isMale
    {
        get => _isMale;
        set
        {
            _isMale = value;
            if (_isMale) isFemale = false; // Uncheck Female if Male is checked
        }
    }

    private bool isFemale
    {
        get => _isFemale;
        set
        {
            _isFemale = value;
            if (_isFemale) isMale = false; // Uncheck Male if Female is checked
        }
    }
    private bool _isMale = false;
    private bool _isFemale = false;

    private bool FormValidated =>
        !string.IsNullOrEmpty(firstName) &&
        !string.IsNullOrEmpty(firstName) &&
        !string.IsNullOrEmpty(email) &&
        !string.IsNullOrEmpty(phoneNum) &&
        !string.IsNullOrEmpty(bankName) &&
        !string.IsNullOrEmpty(acctNum) &&
        !string.IsNullOrEmpty(instagramAccount);

    private bool cashOutInfoSubmitted = false;
    private bool tooLateInsufficientGiveawayFunds = false;
    private bool hideCashoutform = false;


    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(PlayerUID))
        {
            // Redirect to the sign-in page
            NavigationManager.NavigateTo("/");
            return;
        }
        try
        {
            //await FirebaseService.SignOutAsync();
            using (var db = await this.DbFactory.Create<JusGiveawayDB>())
            {
                userInfo = CommonFunctions.GetUserInfoFromIndexedDb(db, PlayerUID); 

                //check if user is logged in
                if (userInfo == null || CommonFunctions.SendUserBackToLogInPageIfNotLoggedIn(userInfo))
                {
                    NavigationManager.NavigateTo("/");
                    return;
                }

                bool authTokenExpired = await FirebaseService.SetAuthTokenIfNotExpired(userInfo.IdToken);
                if (authTokenExpired)
                {
                    await CommonFunctions.SignOutUser(this.DbFactory, PlayerUID);
                    NavigationManager.NavigateTo("/");
                    return;
                }

                //get cashout status from firebase and display form or thanks message
                cashOutInfoSubmitted = await CommonFunctions.GetUserCashOutStatusFromFirebase(PlayerUID);
                hideCashoutform = cashOutInfoSubmitted;

                if (!cashOutInfoSubmitted)
                {
                    userCashOutAmount = await CommonFunctions.GetUserCashOutAmountFromFirebase(PlayerUID);
                }
                email = userInfo.EmailAddress;
            }
        }
        catch (Exception ex)
        {
            await CommonFunctions.WriteErrorMessageToFirebase(ex.Message, "CashoutForm - OnInitializedAsync()", DateTime.Now.ToString());
            Console.WriteLine(ex.Message);
        }
    }

    private void UpdateFirstName(ChangeEventArgs e)
    {
        firstName = e.Value?.ToString() ?? string.Empty;
        StateHasChanged();
    }

    private void UpdateLastName(ChangeEventArgs e)
    {
        lastName = e.Value?.ToString() ?? string.Empty;
        StateHasChanged();
    }

    private void UpdateEmail(ChangeEventArgs e)
    {
        email = e.Value?.ToString() ?? string.Empty;
        StateHasChanged();
    }

    private void UpdatePhoneNum(ChangeEventArgs e)
    {
        phoneNum = e.Value?.ToString() ?? string.Empty;
        StateHasChanged();
    }

    private void UpdateBankName(ChangeEventArgs e)
    {
        bankName = e.Value?.ToString() ?? string.Empty;
        StateHasChanged();
    }

    private void UpdateAcctNum(ChangeEventArgs e)
    {
        acctNum = e.Value?.ToString() ?? string.Empty;
        StateHasChanged();
    }

    private void UpdateInstagramAcct(ChangeEventArgs e)
    {
        instagramAccount = e.Value?.ToString() ?? string.Empty;
        StateHasChanged();
    }

    private async Task OnSubmitClicked()
    {
        //on refreshing, insufficient balance is not stored anywhere, so user keeps getting form. but wont be able to cashout anyway
        //will revisit this and store a flag for unable to cashout or something like that
        int LeftoverGiveawayFunds = (int)await CommonFunctions.GetLeftoverGiveawayFundsFromFirebase();
        if (LeftoverGiveawayFunds < 20000) //hardcoded for now. will read from db later
        {
            ShowDialog = true;
            StateHasChanged();
            alertDialogParams.AlertTitle = "Ooops!";
            alertDialogParams.AlertMessage = new MarkupString($"You are too late! Giveaway balance is insufficient for cashout. There is only <strong>₦{LeftoverGiveawayFunds.ToString("N0")}</strong> left!<br/><br/> Thanks for playing!");
            alertDialogParams.PrimaryBtnText = "Exit";
            alertDialogParams.ShowSecondaryBtn = false;
            alertDialogParams.OnPrimaryButtonClick = EventCallback.Factory.Create(this, AlertDialogPrimaryClicked);

            tooLateInsufficientGiveawayFunds = true;
            ShowToast("Giveaway balance is too low!");
            hideCashoutform = true;
            StateHasChanged();
            return;
        }
        cashOutInfoSubmitted = true;
        hideCashoutform = cashOutInfoSubmitted;
        StateHasChanged();

        CashOutDetails cashOutDetails = new CashOutDetails()
            {
                FirstName = firstName,
                LastName = lastName,
                UID = PlayerUID,
                EmailAddress = email,
                Sex = (isMale == isFemale) ? "NAN" : (isMale ? "M" : "F"),
                DeviceInfo = "NAN",
                BankName = bankName,
                BankAccountNumber = acctNum,
                InstagramAccount = instagramAccount,
                CashoutAmount = userCashOutAmount,
            };

        // Handle successful cashout and redirect if necessary
        if(userInfo != null  && !tooLateInsufficientGiveawayFunds){
            //store user cashout info in firebase db
            try
            {
                bool cashedOut = await CommonFunctions.SaveUserCashOutDetailsToFirebase(userInfo, cashOutDetails);
                bool saveUserCashoutStatus = await CommonFunctions.SetUserHasCashedOutToFirebase(userInfo);

                int currentLeftoverFunds = await CommonFunctions.GetLeftoverGiveawayFundsFromFirebase();
                bool updateLeftoverFunds = await CommonFunctions.UpdateLeftoverGiveawayFundsInFirebase(currentLeftoverFunds - userCashOutAmount);

                if (!cashedOut)
                {
                    Console.WriteLine($"Error saving cashout details to firebase");
                    await CommonFunctions.WriteErrorMessageToFirebase("Error saving cashout details to firebase", "CashOutForm - OnSubmitClick - ", DateTime.Now.ToString());
                    ShowToast("Cashout error!");
                }
                if (!updateLeftoverFunds)
                {
                    Console.WriteLine($"Error updating leftover funds to firebase");
                    await CommonFunctions.WriteErrorMessageToFirebase("Error updating leftover funds to firebase", "CashOutForm - OnSubmitClick - ", DateTime.Now.ToString());
                    ShowToast("Cashout error!");
                }

                if(cashedOut && updateLeftoverFunds)
                {
                    ShowToast("Cashout successful!");
                }
            }
            catch
            {
                ShowToast("Cashout error!");
            }
        }

        //await Task.Delay(10000); // Simulate a delay
    }


    private void NavigateToHomePage()
    {
        NavigationManager.NavigateTo($"/mainpage/{PlayerUID}");
    }

    private void AlertDialogPrimaryClicked()
    {
        ShowDialog = false;
        StateHasChanged();
    }

    private void ShowToast(string message)
    {
        toastMessage = message;
        isToastVisible = true;

        // Auto-hide the toast after 5 seconds
        _ = Task.Delay(10000).ContinueWith(t =>
        {
            InvokeAsync(() =>
            {
                isToastVisible = false;
                StateHasChanged();
            });
        });
    }
}
